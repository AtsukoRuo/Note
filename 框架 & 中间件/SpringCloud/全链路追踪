# 全链路追踪



假设链路中某个服务出现了异常，在如此复杂的链路上，如果没有对应的链路日志，就很难定位发生错误的服务实例，这就是为什么需要全链路追踪组件

![image-20240610010622227](./assets/image-20240610010622227.png)

Dapper, a Large-Scale Distributed Systems Tracing Infrastructure 是分布式链路追踪的理论基础。对于全链路追踪组件，Dapper 论文提出了 3 点要求：

- **低消耗**：在分布式系统中，植入分布式链路追踪组件，对系统性能的损耗应该是很小的
- **应用级的透明**：指在植入分布式链路追踪组件后，对原有的业务应该是透明的，不应该影响原有代码的编写和业务，链路追踪组件会按照自己的维度去采集服务调用之间的数据，并且通过日志进行展示
- **延展性**：链路追踪组件应该能够进行扩展，以适应分布式系统不断膨胀和转变的需求

全链路追踪组件所采集到的数据要满足：

- span：基本单元。执行一次服务调用就生成一个 span，用来记录当时的情况，它会以一个 64 位 ID 作为唯一标识。span 还有其他数据信息，如摘要、时间戳事件、关键值注释（tags）、 span 的 ID 和进度 ID（通常是 IP 地址）。
- trace：它代表一次请求，以一个 64 位 ID 作为唯一标识。一个 trace 包含多个 span
- annotation：注解，它代表服务调用的客户端和服务端的行为，存在以下注解
  - cs（Client Sent）：客户端（服务消费者）发起一个服务调用，它意味着一个 span 的开始
  - sr（Server Received）：服务端（服务提供者）获得请求信息，并开始处理。sr 与 cs 的时间差，就是网络延迟时间
  - ss（Server Sent）：服务端处理完请求，将结果返回给客户端。将 ss 与 sr 的时间差，就是服务端处理请求所用的时间
  - cr（Client Received）：它代表一个 span 的结束，客户端成功接收到服务端的回复。将 cr 与 cs 的时间差，就是客户端从服务端获取响应所用的时间。



Spring Cloud 提供了 spring-cloud-sleuth-zipkin 来集成 Twitter 的 Zipkin 实现

![image-20240610011337784](./assets/image-20240610011337784.png)