# OAuth2



## OAuth2 客户端登录

在本节中，我们来实现一个单点 OAuth2 登录的程序。

![image-20240629120248957](./assets/image-20240629120248957.png)

首先访问该网址 https://github.com/settings/applications/new 申请授权服务器

![image-20240629120419186](./assets/image-20240629120419186.png)

然后就可以获取到 Client ID、Client secrets 了

![image-20240629120513191](./assets/image-20240629120513191.png)

先引入 Maven 依赖

~~~xml
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-oauth2-client</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
</dependency>
~~~

再启用 OAuth2 客户端

~~~java
@Configuration
public class ProjectConfig
    extends WebSecurityConfigurerAdapter {
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.oauth2Login();		
        // 向过滤链中添加了 OAuth2AuthorizationFilter、OAuth2AuthorizationRequestRedirectFilter 这两个过滤器
    }
}
~~~

这样，当用户点击授权应用的链接后，`OAuth2AuthorizationRequestRedirectFilter`会拦截此请求。然后构造出相应的参数，并与 URL 拼接后，再重定向到授权页面。授权完成后，授权服务器会请求我们的回调 URL，这又会被 `OAuth2LoginAuthenticationFilter` 拦截，它从查询参数中提取相应的信息，封装成 `Authentication` 放在 `SecurityContext` 中。

`ClientRegistration` 表示某个授权服务器的 `OAuth2` 客户端。`OAuth2LoginAuthenticationFilter`、`ClientRegistrationRepository`、`ClientRegistration` 这三者关系如下图所示：

![image-20240629130353988](./assets/image-20240629130353988.png)

下面我们要创建 `ClientRegistration` 实例：

~~~Java
ClientRegistration cr = ClientRegistration.withRegistrationId("github")
    .clientId("a7553955a0c534ec5e6b")
    .clientSecret("1795b30b425ebb79e424afa51913f1c724da0dbb")
    .scope(new String[]{"read:user"})
    // 客户端将用户重定向到进行身份验证的URI
    .authorizationUri("https://github.com/login/oauth/authorize")
    // 客户端来获取访问令牌和刷新令牌的 URI
    .tokenUri("https://github.com/login/oauth/access_token")
    // 客户端来获取有关用户的更多详细信息的 URI
    .userInfoUri("https://api.github.com/user")
    .userNameAttributeName("id")
    .clientName("GitHub")
    .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)
    .redirectUriTemplate("{baseUrl}/{action}/oauth2/code/{registrationId}")
    .build();
~~~

然后将 `ClientRegistration` 注册进 `ClientRegistrationRepository`，而 `ClientRegistrationRepository` 通过 @Bean 的方式注册到 Spring Security 中，或者使用 `Customizer` 来注册

~~~java
// 方式一
@Bean
public ClientRegistrationRepository clientRepository() {
    var c = clientRegistration();		// 获取一个 ClientRegistration
    return new InMemoryClientRegistrationRepository(c);
}

// 方式二
@Override
protected void configure(HttpSecurity http) throws Exception {
    http.oauth2Login(c -> {
       var r = clientRegistration(); c.clientRegistrationRepository(InMemoryClientRegistrationRepository(r));
    });
}
~~~

## 授权服务器



## 资源服务器

## JWT

